require = (function () { function e(t, n, a) { function r(l, c) { if (!n[l]) { if (!t[l]) { var d = "function" == typeof require && require; if (!c && d) return d(l, !0); if (o) return o(l, !0); var $ = Error("Cannot find module '" + l + "'"); throw $.code = "MODULE_NOT_FOUND", $ } var _ = n[l] = { exports: {} }; t[l][0].call(_.exports, function (e) { return r(t[l][1][e] || e) }, _, _.exports, e, t, n, a) } return n[l].exports } for (var o = "function" == typeof require && require, l = 0; l < a.length; l++)r(a[l]); return r } return e })()({ 1: [function (e, t, n) { let a = e("./lib/parse-font"); n.parseFont = a, n.createCanvas = function (e, t) { return Object.assign(document.createElement("canvas"), { width: e, height: t }) }, n.createImageData = function (e, t, n) { switch (arguments.length) { case 0: return new ImageData; case 1: return new ImageData(e); case 2: return new ImageData(e, t); default: return new ImageData(e, t, n) } }, n.loadImage = function (e, t) { return new Promise(function (n, a) { let r = Object.assign(document.createElement("img"), t); function o() { r.onload = null, r.onerror = null } r.onload = function () { o(), n(r) }, r.onerror = function () { o(), a(Error('Failed to load the image "' + e + '"')) }, r.src = e }) } }, { "./lib/parse-font": 2 }], 2: [function (e, t, n) { "use strict"; let a = "'([^']+)'|\"([^\"]+)\"|[\\w\\s-]+", r = RegExp("(bold|bolder|lighter|[1-9]00) +", "i"), o = RegExp("(italic|oblique) +", "i"), l = RegExp("(small-caps) +", "i"), c = RegExp("(ultra-condensed|extra-condensed|condensed|semi-condensed|semi-expanded|expanded|extra-expanded|ultra-expanded) +", "i"), d = RegExp(`([\\d\\.]+)(px|pt|pc|in|cm|mm|%|em|ex|ch|rem|q) *((?:${a})( *, *(?:${a}))*)`), $ = {}; t.exports = e => { if ($[e]) return $[e]; let t = d.exec(e); if (!t) return; let n = { weight: "normal", style: "normal", stretch: "normal", variant: "normal", size: parseFloat(t[1]), unit: t[2], family: t[3].replace(/["']/g, "").replace(/ *, */g, ",") }, a, _, s, u, h = e.substring(0, t.index); switch ((a = r.exec(h)) && (n.weight = a[1]), (_ = o.exec(h)) && (n.style = _[1]), (s = l.exec(h)) && (n.variant = s[1]), (u = c.exec(h)) && (n.stretch = u[1]), n.unit) { case "pt": n.size /= .75; break; case "pc": n.size *= 16; break; case "in": n.size *= 96; break; case "cm": n.size *= 96 / 2.54; break; case "mm": n.size *= 96 / 25.4; break; case "%": break; case "em": case "rem": n.size *= 16 / .75; break; case "q": n.size *= 96 / 25.4 / 4 }return $[e] = n } }, {}], 3: [function (e, t, n) { let a; function r(e) { return e < 0 ? 0 : e > 255 ? 255 : e } function o(e, t, n) { let r = (e + t * a.width) * 4; a.data[r + 0] = parseInt(n[0] + .5), a.data[r + 1] = parseInt(n[1] + .5), a.data[r + 2] = parseInt(n[2] + .5), a.data[r + 3] = 255 } function l(e, t) { return [e[0] - t[0], e[1] - t[1], e[2] - t[2]] } function c(e, t, n, o, l) { let c = (e + t * a.width) * 4; a.data[c + 0] = r(a.data[c + 0] + n), a.data[c + 1] = r(a.data[c + 1] + o), a.data[c + 2] = r(a.data[c + 2] + l), a.data[c + 3] = 255 } function d(e) { return .2126 * e[0] + .7152 * e[1] + .0722 * e[2] > 128 ? [255, 255, 255] : [0, 0, 0] } function $(e, t) { let n = (e + t * a.width) * 4; return [a.data[n + 0], a.data[n + 1], a.data[n + 2]] } t.exports = { applyDithering: function e(t) { a = ctx.getImageData(0, 0, t.width, t.height); let n, r, _, s, u, h; for (let f = 0; f < t.height; f++)for (let g = 0; g < t.width; g++)r = d(n = $(g, f)), o(g, f, r), s = (_ = l(n, r))[0], u = _[1], h = _[2], g + 1 < t.width && c(g + 1, f, 7 / 16 * s, 7 / 16 * u, 7 / 16 * h), g - 1 > 0 && f + 1 < t.height && c(g - 1, f + 1, 3 / 16 * s, 3 / 16 * u, 3 / 16 * h), f + 1 < t.height && c(g, f + 1, 5 / 16 * s, 5 / 16 * u, 5 / 16 * h), g + 1 < t.width && c(g + 1, f + 1, 1 / 16 * s, 1 / 16 * u, 1 / 16 * h); ctx.putImageData(a, 0, 0) } } }, {}], img2braille: [function (e, t, n) { let { Image: a, createCanvas: r } = e("canvas"), { applyDithering: o } = e("./util/dithering"); function l(e) { let t = !0; for (i = 0; i < e.length; i++)if (0 != e[i]) { t = !1; break } return String.fromCharCode(10240 + (total_val = t ? 4 : (e[0] << 0) + (e[1] << 1) + (e[2] << 2) + (e[4] << 3) + (e[5] << 4) + (e[6] << 5) + (e[3] << 6) + (e[7] << 7))) } t.exports = { braillefy: function e(t = "", n = 30, c = {}) { let d = ""; return c.colors || (c.colors = { red: 1, green: 1, blue: 1 }), new Promise((e, $) => { let _ = r(), s = new a; s.onload = () => { let t = s.width, a = s.height; s.width != 2 * n && (a = (t = 2 * n) * s.height / s.width), _.width = t - t % 2, _.height = a - a % 4, (ctx = _.getContext("2d")).fillStyle = "#FFFFFF", ctx.fillRect(0, 0, _.width, _.height), ctx.mozImageSmoothingEnabled = !1, ctx.webkitImageSmoothingEnabled = !1, ctx.msImageSmoothingEnabled = !1, ctx.imageSmoothingEnabled = !1, ctx.drawImage(s, 0, 0, _.width, _.height), c.dither && o(_); for (let r = 0; r < _.height; r += 4) { for (let $ = 0; $ < _.width; $ += 2) { let u = [0, 0, 0, 0, 0, 0, 0, 0], h = 0; for (let f = 0; f < 2; f++)for (let g = 0; g < 4; g++) { let m = ctx.getImageData($ + f, r + g, 1, 1).data, w = (m[0] / c.colors.red + m[1] / c.colors.green + m[2] / c.colors.blue) / 3; c.invert ? w < 128 && (u[h] = 1) : w > 128 && (u[h] = 1), h++ } d += l(u) } d += c.lineSeparator || "\n" } return e(d) }, s.onerror = e => $(e), s.src = t }) } } }, { "./util/dithering": 3, canvas: 1 }] }, {}, []);

